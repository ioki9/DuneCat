set(SQLITE_REQUIRE_COMPILATION FALSE)

if(APPLE)
    set(SQLITE_IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/libsqlite3_dc.dylib)
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/libsqlite3_dc.dylib")
        set(SQLITE_REQUIRE_COMPILATION TRUE)
        set(COMPILE_COMMAND "gcc -o libsqlite3_dc.dylib sqlite3.c -dynamiclib")
    endif()
elseif(UNIX)
    set(SQLITE_IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/libsqlite3.so)
    if(NOT EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/libsqlite3.so")
        set(SQLITE_REQUIRE_COMPILATION TRUE)
        set(COMPILE_COMMAND "gcc sqlite3.c -ldl -lm -fPIC -lpthread -shared -o libsqlite3.so")
    endif()
elseif(WIN32)
    set(SQLITE_IMPORTED_LOCATION ${CMAKE_CURRENT_SOURCE_DIR}/sqlite3.dll)
endif()
if(SQLITE_REQUIRE_COMPILATION)
    file(TOUCH build.sh)
    file(CHMOD ${CMAKE_SOURCE_DIR}/3rdparty/sqlite3/build.sh ${CMAKE_SOURCE_DIR}/3rdparty/sqlite3
        PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_WRITE GROUP_EXECUTE WORLD_READ WORLD_WRITE WORLD_EXECUTE)
    file(WRITE build.sh "${COMPILE_COMMAND}")
    execute_process(
        COMMAND bash "${CMAKE_CURRENT_SOURCE_DIR}/build.sh"
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
        RESULT_VARIABLE EXECUTE_RESULT
        OUTPUT_VARIABLE EXECUTE_OUTPUT
        ERROR_VARIABLE EXECUTE_ERROR
    )
endif()
add_library(SQLite3 SHARED IMPORTED GLOBAL)
if(WIN32)
    set_target_properties(SQLite3 PROPERTIES
        IMPORTED_LOCATION ${SQLITE_IMPORTED_LOCATION}
        IMPORTED_IMPLIB ${CMAKE_CURRENT_SOURCE_DIR}/sqlite3.lib
    )
else()
set_target_properties(SQLite3 PROPERTIES
    IMPORTED_LOCATION ${SQLITE_IMPORTED_LOCATION}
)
endif()
file(COPY ${SQLITE_IMPORTED_LOCATION}
    DESTINATION ${CMAKE_BINARY_DIR}/bin)
file(COPY ${SQLITE_IMPORTED_LOCATION}
    DESTINATION ${CMAKE_BINARY_DIR}/tests/core)
